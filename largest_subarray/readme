最大连续子数组问题：
输入：给定一个数值类型数组 A
输出：一个最大连续子数组序列 A[p, q), 该序列具有最大和
==================================================================================================================
蛮力：
给定输入A的连续子数组数量为 C(n,2) = n^2, 遍历n^2个子数组并求和，记录和最大的子数组位置；
算法策略：算法遍历所有的A[i, j)并记录各个子数组的和;
伪码：
    maxSubArray(A):
        sum = INT_MIN;
        for i = 0 to n:
            pre = A[i];
            for j = 1 to n:   // A[i,j]
                pre+=A[j];
                sum = max(sum, pre);
        return max;
==================================================================================================================
分治策略
    算法思路：
        1. 分：将输入序列A以mid为界，分为大小大致相当的子序列 L, R。
            a. 问题分解为两个和原问题形式完全一致的子问题和一个形式和原问题不一致的子问题
        2. 治：求解 L, R 
        3. 合：根据子问题的解求解原问题
            a. 原问题的最大连续子数组位于 L 中
            b. 原问题的最大连续子数组位于 R 中
            c. 原问题的最大连续子数组跨越mid。（1.a中所描述的形式和原问题不太一致的子问题）
    跨越mid的最大连续子数组求解策略：
        crossMidMaxSubArray(A, lo, mid, hi):
            lSum = rSum = INT_MIN; 
            lPos = rPos = mid;
            tmp = 0;
            for i=mid to lo:
                if ( (tmp+=A[i]) > lSum )
                    lSum = tmp;
                    lPos = i;
            tmp = 0;            
            for i=mid to hi:
                if ( (tmp+=A[i]) > lSum )
                    lSum = i;
                    rPos = i;
            return (lPos, rPos, lSum + rSum);
        maxSubArray(A, lo, hi):
            if (hi-lo < 2) return (lo, hi, A[lo]);
            mid = (lo+hi) >> 1;
            L = maxSubArray(A, lo, mid-1);
            R = maxSubArray(A, mid+1, hi);
            C = crossMidMaxSubArray(A, lo, mid, hi);        // O(n)
            return maxSum(L, R, C);
    复杂度：
        算法的递归方程：T(n) = 2T(n/2) + O(n); (跨越mid的最大连续子数组求解需要 O(n)的复杂度)
        算法的整体执行策略等价于归并算法，只有 merge/crossMidMaxSubArray 时采取的策略不同。
        算法的运行时间为 T(n) = O(nlogn);
==================================================================================================================
迭代算法：
    当知道数组[0, r]的最大连续子数组时，计算[0, r+1]的最大连续子数组：
        1. 最大连续子数组以 r+1 结尾，且加上一个和大于0的最大前缀
        2. 最大连续子数组为[0, r]的的最大连续子数组。
    伪码：
        prefix = sum = INT_MIN;   // prefix指定A[0, i] 的最大连续后缀， sum指定最大连续子数组
        for i = 0 to n:
            if (sum < prefix + A[i]) 
                sum = prefix + A[i];     
            prefix = (prefix + A[i]) < 0 ? 0 : prefix + A[i];
==================================================================================================================
动态规划：
    定义Dp[i]为以A[i]为结尾的最大子数组和；
    数组A的最大子数组和：遍历所有结尾情况的Dp[i], 获取最优解
        max = Dp[0];
        for i=1 to n:
            if (max < Dp[i])
                max = Dp[i];
    状态转移关系：假设我们已经算出了Dp[i-1]，如何推导出Dp[i]呢？
        1. Dp[i] 与前面的相邻子数组连接，形成一个和更大的子数组；
        2. 不与前面的子数组连接，自己作为一个子数组;
    Dp[i] = max(A[i], Dp[i-1] + A[i]);  // notice：无非就是考虑 A[0, i) 的最大后缀和是否大于0
    伪代码：
        maxSubArray(A):
            dp0 = max = A[0], dp1;
            for i=1 to n:
                dp1 = math.max( A[i], dp0 + A[i] );
                max = math.max( max, dp1 );
                dp0 = dp1;
